-------COMEÇANDO COM SPRING MVC-----------------------------------
jboss forge
	Cria toda uma estrutura para somente o programador codificar
	
	
forge 
	abre um terminal no /bin
	forge
	project-new --named <nome_prj>
		cria-se um novo projeto baseado no maven
		

apache tomcat
	servers>escolha apache> versão do tomcat
	
	
configurar o tomcat para receber requisições
		Usando servlet
			Spring MVC já vem com servlet
		getServletConfigClasses 
			pede uma classe de array
		
		getServletMappings 
			pede um array com os mapeamentos
			
		AppWebConfiguration
			classe de configuração do servlet
			
		@EnableWebMvc
			habilita a classe de configuração do Spring
			
		@ComponentScan
		Permite que o spring encontre os controllers
			automaticamente
			
			
Pasta WEB-INF
	É uma pasta protegida pelo servidor
		os arquivos não podem ser acessados diretamente
	Deixar as views dentro dela para que usuario não acesse diretamente
	tem que passar pelo controller primeiro
	
	
metodo na classe de configuração para encontrar as views
	metodo que retorna InternalResourceViewResolver
	@Bean
		retorno de chamada do metodo
		possa ser gerenciado pelo SpringMVC
		
		

-----------------AULA 2- CADASTRO DE PRODUTOS-----------------------------------------------
para que o spring salve a entidade no banco
	precisa de um gerenciador de entidade
		EntityManager
			persitir a entidade no banco

@Autowired
	serve para que nós não se preocupemos em criar
		manualmente o ProduoDAO no Controller
		cria um instancia do objeto que foi anotado
			Injenção de dependência
				joga toda responsabilidade de instanciar ou configurar o objeto para o servidor
		@Repository
			Spring gerencia o ProdutoDAO
			
		Spring com JPA
			criamos um unico metodo
			será gerenciado pelo Spring
			era o EntityManager
			precisa de um adapter
				passando o que o hibernate especifica
			criamos um datasource
				contem as configurações que o banco de dados precisa
			Properties
				para poder setar algumas configurações
					daileto
						usado para comunicação com o banco de dados
						
Configurando o TransactionManager
	TransactionManager
		EntityManager possa gerenciar transações de nossas entidades
	
	EnableTransactionManagement
		Spring ativa o gerenciamento de transações
		reconhece o TransactionManager
		
	Spring não cria o banco de dados
		somente as tabelas
		
--------------------Aula 4-Listando os produtos------------------------------------------------------------		
						
getResultList()
	ira criar uma lista
	com os resultados
	
	
ModelAndView
	relacionamento de um modelo
	visualização view
	disponilizar objeto qualquer para view
	redirecionamento de páginas
	
	
Encoding
	filtros de requisição para caracteres especiais	
	
	
-------------Aula 5- Redirect com Escopo de Flash-----------------------------------------------------------------

Quando retornamos uma string
	o Spring procura uma pagina com o mesmo nome
	
redirect 
	passa um status para o navegador
		302
	carregar uma outra pagina
		esquecer dados anteriores
	
enviar informações entre requisições
	RedirectAttributtes
		atributo do tipo flash
			addFlashAttribute 
				recebe a chave, e a mensagem
		duram até a proxima requisição de deixam de existir
		


--------------Aula 6-Validação e conversão de dados----------------------------------------------------------------------
Classe do proprio Spring -ValidationUtils
	metodos que validam dados	
		rejectIfEmpty()
			rejeite se for vazio
	precisamos usar a dependência Bean Validation
		Hibernate Validator
		configurar o projeto 
		
	@InitBinder
	
	
-------------Mais validações-Aula7---------------------------------------------------------------------------------------------
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>	
	para exibir mais mensagens de erros
		form:errors
		
message.properties
	arquivo para carregar mensagens de erro
	
form:form
	da biblioteca do Spring
	commandName
		referência a qual entidade aquele formulario se refere
			Exemplo
				commandName="produto"
				
messages.properties
	colocamos os campos requiridos
	configuramos o UTF-8
	
Spring gerar automaticamente a rota da action
	caso o controller mude a rota do formulario também muda
		taglib
			<%@ taglib uri="http://www.springframework.org/tags" prefix="s" %>
			mvcUrl
				passsamos as iniciais para se referir a tal controller
					"${s:mvcUrl('PC#gravar').build()}"
					

----------------Aula 8 Trabalhar com datas---------------------------------
Duas classes principais para trabalhar com datas
	Date
	Calendar
		mais recente simples
		formato padrão é internacional
			@DateTimeFormat(pattern="dd/MM/yyyy")
				Spring consiga converter corretamente
		@DateTimeFormat
			cria um metodo que possa configurar toda configuração de data
			classe AppWebConfiguration
				metodo que retorne FormattingConversionService
				
 form:input
 	caso tenha um erro, não perdemos os dados dentro do input
 	eles se mantem
-----------------Aula 9  Enviando arquivos ao servidor----------------------------------------------			
						
guardar arquivos no servidor
			banco aceita byte como arquivo, teria que converter ele
			guardar na pasta do sistema apenas
			Spring envia o objeto para o controller
				MultipartFile
					para pegar o nome do arquivo
						getOriginalFilename()	 		
			requisições multipart
				enctype
				fica no form

			 temos que configurar um metodo na classe App-WC
			    para que o spring reconheça o multipart

			 MultipartResolver
			    Resolvedor de multimidia
			        PDF,imagem

			 ServletSpringMVC
			    classe de inicialização da aplicação
	            cria-se um metodo para fazer a conversão do multipart
	            customizeRegistration
	                sobrescrever esse metodo

-----------------Salvando servidor----------------------------------------------
getServletContext
    extrair o contexto atual do usuario
getRealPath
    retorna o caminho de determinada pasta do servidor

Nenhum Bean qualificado
    componentScan
    vai na classe de configuração do Spring
        AppWebConfiguration

----------------- URLs amigáveis aula 10----------------------------------------------

	<td><a href="${s:mvcUrl('PC#detalhe').arg(0,produto.id).build()}">${produto.titulo }</a></td>
	    para enviar um parametro para o metodo
	@PathVariable
	    para que possamos passar o /na url

-----------------Aula 11 Expondo atributos no JSP----------------------------------------------
	
	


		
		